Proces pythonowy odpowiadający za zlecanie rozwiązania problemu TSP P1
Proces rozwiązujący problem TSP P2
Proces monitorujący konkretny PID oczekujący aż dany plik się pojawi i do momentu aż on nie zniknie jest zbierane zużycie CPU z stałych odstępach czasu z danego P3


P1{
for config of measurements:
	While exist file PROFILER_IN_PROGRESS:
	call P2{
	    p = psutil.Process(os.getpid())
	    p.nice(psutil.HIGH_PRIORITY_CLASS)
		prepare env to meassure
		create file MEASURE_IN_PROGRESS (with_PID) to mark start of meassure
		execute meassure
		delete file MEASURE_IN_PROGRESS to mark stop of measure
	}
	if config is CPU:
	call P3{
	    p = psutil.Process(os.getpid())
	    p.nice(psutil.HIGH_PRIORITY_CLASS)
		create file PROFILER_IN_PROGRESS
		while True:
			if exist MEASURE_IN_PROGRESS:
				get PID of proccess from file MEASURE_IN_PROGRESS
				p = psutil.Process(PID)
				open/create csv buffor
				buffor_on_CPU_measurements
				while exist MEASURE_IN_PROGRESS:
					buffor_on_CPU_measurements.append(p.cpu_percent() / psutil.cpu_count())
				add row to csv with buffor_on_CPU_measurements
				break;
		delete file PROFILER_IN_PROGRESS
	}
	get PID P3
}